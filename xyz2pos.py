import sys

f = open(sys.argv[1])
lines = f.readlines()
f.close()

latt_vec = [[0,0,0],[0,0,0],[0,0,0]]
latt_scale = 1.0

#lattice vectors
line = lines[1]
sline = line.split()
latt_vec[0][0] = float(sline[0])
latt_vec[1][1] = float(sline[1])
latt_vec[2][2] = float(sline[2])

ATOMS = []
NATOMS = []
scell = []
#count the species

for n in range(2,len(lines)):
    line = lines[n]
    sline = line.split()
    spec = sline[0].strip()
    if (spec == "#"):
	continue
    x,y,z = float(sline[1]), float(sline[2]), float(sline[3])
    if spec not in ATOMS:
        ATOMS.append(spec)
        NATOMS.append(1)
        scell.append([])
        scell[-1].append([x,y,z])
    else:
        pos = ATOMS.index(spec)
        NATOMS[pos] = NATOMS[pos] + 1
        scell[pos].append([x,y,z])
        
#transform cartesion to fractional
for nspec in range(len(scell)):
    natoms = len(scell[nspec])
    for i in range(natoms):
        x = scell[nspec][i][0] / latt_vec[0][0]
        y = scell[nspec][i][1] / latt_vec[1][1]
        z = scell[nspec][i][2] / latt_vec[2][2]
        scell[nspec][i] = [x,y,z]

#print "generated by xyz2pos.py"
spec = " "
for s in ATOMS:
    spec = spec + s + "  "
print spec, "   generated by xyz2pos.py"

print "  ", latt_scale
print "    %20.16f  %20.16f  %20.16f" % (latt_vec[0][0], latt_vec[0][1], latt_vec[0][2])
print "    %20.16f  %20.16f  %20.16f" % (latt_vec[1][0], latt_vec[1][1], latt_vec[1][2])
print "    %20.16f  %20.16f  %20.16f" % (latt_vec[2][0], latt_vec[2][1], latt_vec[2][2])

line = ""
for i in range(len(NATOMS)):
    line = line + (" %d " % (NATOMS[i]))
print line

print "Direct"

for nspec in range(len(scell)):
    natoms = len(scell[nspec])
    for i in range(natoms):
        x,y,z = scell[nspec][i][0], scell[nspec][i][1], scell[nspec][i][2]
        print " %20.16f  %20.16f  %20.16f" % (x,y,z)

print ""

for nspec in range(len(scell)):
    natoms = len(scell[nspec])
    for i in range(natoms):
        print " %20.16f  %20.16f  %20.16f" % (0.0,0.0,0.0)
        
